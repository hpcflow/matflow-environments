name: release-conda-pack-env
on:
  workflow_dispatch:
    inputs: 
      environment:
        type: choice
        required: true
        description: Choose which environment to conda-pack
        options:
          - damask_parse_env
          - damask_env
          - dream3d_env
          - defdap_env
          - formable_env
          - matflow_env
          - matflow_damask_full_env
          - matflow_full_env
          - sklearn_env
      lock:
        description: "Generate a lock file?"
        required: true
        type: boolean
        default: true
      lock-separate-windows:
        description: "Expect a separate environment_windows.yaml when locking for Windows?"
        required: true
        type: boolean
        default: false
      lock_kind:
        type: choice
        description: "Which type of conda lock file to output"
        required: true
        default: env
        options:
          - lock
          - explicit
          - env
      lock_platforms:
        description: "Platforms to lock to."
        default: '["linux-64", "osx-64", "osx-arm64", "win-64"]'
      pack_linux:
        description: "Build a packed env for Linux?"
        required: true
        type: boolean
        default: false
      pack_macos:
        description: "Build a packed env for macOS?"
        required: true
        type: boolean
        default: false
      pack_windows:
        description: "Build a packed env for Windows?"
        required: true
        type: boolean
        default: false
      release:
        description: "Generate a GitHub release?"
        required: true
        type: boolean
        default: false

jobs:
  conda-lock:
    if: github.event.inputs.lock == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(github.event.inputs.lock_platforms)}}
    steps:
      - uses: actions/checkout@v4

      - name: Download and extract micromamba executable
        if: matrix.platform != 'linux-64'
        run: |
          curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba

      - name:  Create a base environment including conda-lock
        if: matrix.platform != 'linux-64'
        run: |
          ./bin/micromamba create --yes --name base_env -c conda-forge python conda-lock

      - name: Run conda-lock within Docker (linux - CentOS)
        if: matrix.platform == 'linux-64'
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/hpcflow/centos7-micromamba:latest
          options: -v ${{ github.workspace }}:/home -w /home --env GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          run: |
            micromamba run -n base_env \
            conda-lock lock \
            --platform ${{ matrix.platform }} \
            --file ${{ github.event.inputs.environment }}/environment.yaml \
            --lockfile conda-${{ matrix.platform }}.lock.yml \
            --kind ${{ github.event.inputs.lock_kind }}
      
      - name: Take ownership of generated artifact (linux - CentOS)
        if: matrix.platform == 'linux-64'
        run: |
          sudo chown $USER:$USER conda-${{ matrix.platform }}.lock.yml
          chmod +r conda-${{ matrix.platform }}.lock.yml

      - name: Run conda-lock (osx, osx-arm64, or windows (same file))
        if: ${{ contains(fromJson('["osx-64", "osx-arm64"]'), matrix.platform) || (github.event.inputs.lock-separate-windows == 'false' && matrix.platform == 'win-64')}}
        run: |
          ./bin/micromamba run -n base_env \
           conda-lock lock \
           --platform ${{ matrix.platform }} \
           --file ${{ github.event.inputs.environment }}/environment.yaml \
           --lockfile conda-${{ matrix.platform }}.lock.yml \
           --kind ${{ github.event.inputs.lock_kind }}
      
      - name: Run conda-lock (separate Windows file)
        if: "${{ matrix.platform == 'win-64' && github.event.inputs.lock-separate-windows == 'true' }}"
        run: |
          ./bin/micromamba run -n base_env \
           conda-lock lock \
           --platform ${{ matrix.platform }} \
           --file ${{ github.event.inputs.environment }}/environment_windows.yaml \
           --lockfile conda-${{ matrix.platform }}.lock.yml \
           --kind ${{ github.event.inputs.lock_kind }}
      
      - name: Upload conda-lock file (${{ matrix.platform }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-conda-${{ matrix.platform }}.lock.yml
          path: conda-${{ matrix.platform }}.lock.yml

  conda-pack-linux:
    if: github.event.inputs.pack_linux == 'true'
    needs: [conda-lock]
    runs-on: ubuntu-latest
    steps:
      - name: Download conda-lock file
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-conda-linux-64.lock.yml      
      - name: list files
        run: |
          ls -l
          pwd
      - name: Run conda-pack within Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/hpcflow/centos7-micromamba:latest
          options: -v ${{ github.workspace }}:/home -w /home --env GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          run: |
            pwd
            ls -l             
            micromamba --root-prefix /root/micromamba create --name ${{ github.event.inputs.environment }}-linux --file conda-linux-64.lock.yml
            micromamba --root-prefix /root/micromamba run -n base_env conda-pack --prefix /root/micromamba/envs/${{ github.event.inputs.environment }}-linux
      - name: Take ownership of artifact
        run: |
          sudo chown $USER:$USER ${{ github.event.inputs.environment }}-linux.tar.gz
          chmod +r ${{ github.event.inputs.environment }}-linux.tar.gz       
      - name: Upload conda-packed environment 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-linux.tar.gz
          path: ${{ github.event.inputs.environment }}-linux.tar.gz
    
  conda-pack-windows:
    if: github.event.inputs.pack_windows == 'true'
    needs: [conda-lock]
    runs-on: windows-latest
    steps:
      - name: Download conda-lock file
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-conda-win-64.lock.yml
      - name: Download micromamba executable
        run: |
          Invoke-WebRequest -UseBasicParsing https://github.com/mamba-org/micromamba-releases/releases/latest/download/micromamba-win-64 -OutFile micromamba-win-64.exe
      - name:  Create a base environment including conda-pack
        run: |
          .\micromamba-win-64.exe --root-prefix ~\micromamba create -y --name base_env -c conda-forge python conda-pack conda-lock
      - name: Create the environment
        run: |
          .\micromamba-win-64.exe --root-prefix ~\micromamba create -y --name ${{ github.event.inputs.environment }}-win --file conda-win-64.lock.yml
      - name: Pack the environment
        run: |
          .\micromamba-win-64.exe --root-prefix ~\micromamba run --name base_env conda-pack --prefix C:\Users\runneradmin\micromamba\envs\${{ github.event.inputs.environment }}-win
      - name: Upload conda-packed environment 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-win.tar.gz
          path: ${{ github.event.inputs.environment }}-win.tar.gz

  conda-pack-macos:
    if: github.event.inputs.pack_macos == 'true'
    needs: [conda-lock]
    runs-on: macos-latest
    steps:
      - name: Download conda-lock file
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-conda-osx-64.lock.yml
      - name: Download and extract micromamba executable
        run: |
          curl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj bin/micromamba
      - name:  Create a base environment including conda-pack
        run: |
          ./bin/micromamba --root-prefix ~/micromamba create -y --name base_env -c conda-forge python conda-pack conda-lock
      - name: Create the environment
        run: |
          ./bin/micromamba --root-prefix ~/micromamba create -y --name ${{ github.event.inputs.environment }}-macos --file conda-osx-64.lock.yml
      - name: Pack the environment
        run: |
          ./bin/micromamba --root-prefix ~/micromamba run --name base_env conda-pack --prefix /Users/runner/micromamba/envs/${{ github.event.inputs.environment }}-macos
      - name: Upload conda-packed environment 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.environment }}-macos.tar.gz
          path: ${{ github.event.inputs.environment }}-macos.tar.gz
  
  release:
    if: github.event.inputs.release == 'true'
    needs:
      - conda-lock
      - conda-pack-linux
      - conda-pack-windows
      - conda-pack-macos
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4      
      - name: Get current date-time
        id: date
        run: |
          DATETIME=$(date +'%Y-%m-%d-%H%M')
          echo "DATETIME is: $DATETIME"
          echo "datetime=$DATETIME" >> $GITHUB_OUTPUT
      - name: Add a new tag (current date-time)
        run: |
          git tag ${{ steps.date.outputs.datetime }}
          git push && git push origin ${{ steps.date.outputs.datetime }}      
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: list files
        run: |
          pwd
          ls -l          
      - name: Release
        id: release        
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.environment }}-${{ steps.date.outputs.datetime }}
          tag_name: ${{ steps.date.outputs.datetime }}
          files: |
            **/*.lock.yml
            **/*.tar.gz